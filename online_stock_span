# 901. Online Stock Span
# Medium
# 5.1K
# 318
# Companies
# Design an algorithm that collects daily price quotes for some stock and returns the span of that stock's price for the current day.

# The span of the stock's price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day.

# Example 1:
# Input
# ["StockSpanner", "next", "next", "next", "next", "next", "next", "next"]
# [[], [100], [80], [60], [70], [60], [75], [85]]
# Output
# [null, 1, 1, 1, 2, 1, 4, 6]

class StockSpanner:

    def __init__(self):
        self.prices = []
        self.spans = []
        
    def next(self, price: int) -> int:
        span = 1
        n = len(self.prices)
        while n > 0 and self.prices[n - 1] <= price:
            span += self.spans[n - 1]
            n -= self.spans[n - 1]
        self.prices.append(price)
        self.spans.append(span)
        
        return span
        
prices = [[], [100], [80], [60], [70], [60], [75], [85]]
stock_spanner = StockSpanner()
output = []
for price in prices:
    if not price:
        output.append(None)
    else:
        output.append(stock_spanner.next(price[0]))
